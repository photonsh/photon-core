{"name":"Common Lisp","scopeName":"source.common.lisp","comment":"\nAwesome Syntax Highlighting for Common Lisp!\n","fileTypes":["lisp","lsp","asd","cl","l","mud"],"foldingStartMarker":"\\(\\s*$","foldingStopMarker":"^\\s*\\)","patterns":[{"include":"#comment"},{"include":"#quote"},{"include":"#sexp"},{"include":"#string"},{"include":"#language-functions"},{"include":"#constants"},{"include":"#illegal"}],"repository":{"comment":{"patterns":[{"captures":{"1":{"name":"punctuation.definition.comment.common.lisp"}},"match":"(;).*$\\n?","name":"comment.line.semicolon.common.lisp"},{"begin":"#\\|","captures":{"0":{"name":"punctuation.definition.comment.common.lisp"}},"end":"\\|#","name":"comment.multiline.common.lisp"}]},"constants":{"patterns":[{"match":"\\b(t|nil)(?=[\\s;()'\"\\]\\}])","name":"constant.language.boolean.common.lisp"},{"match":"(?<!\\w)(:)([^\\s\\)]*)(?=[\\s\\)])","name":"constant.keyword.common.lisp"},{"include":"#numeric"}]},"numeric":{"patterns":[{"match":"(?<![[:alnum:].])(-?\\d+/\\d+)\\b","name":"constant.numeric.ratio.common.lisp"},{"match":"(-?\\d*\\.\\d+([dDeEfFlLsS][+-]?\\d+)?)|(-?\\d+(\\.\\d*)?([dDeEfFlLsS][+-]?\\d+))","name":"constant.numeric.float.common.lisp"},{"match":"(#[xX]-?[0-9a-fA-F]+)(?=[\\s;()'\"\\]\\}])","name":"constant.numeric.hexadecimal.common.lisp"},{"match":"(#[oO]-?[0-7]+)(?=[\\s;()'\"\\]\\}])","name":"constant.numeric.octal.common.lisp"},{"match":"(#[bB]-?[01]+)(?=[\\s;()'\"\\]\\}])","name":"constant.numeric.binary.common.lisp"},{"match":"(#\\d+[rR]-?[0-9a-zA-Z]+)(?=[\\s;()'\"\\]\\}])","name":"constant.numeric.arbitrary-radix.common.lisp"},{"match":"(?<![[:alnum:].])(-?\\d+\\.?)(?=[\\s;()'\"\\]\\}])","name":"constant.numeric.integer.common.lisp"}]},"illegal":{"match":"[()\\[\\]{}]","name":"invalid.illegal.parenthesis.common.lisp"},"language-functions":{"patterns":[{"comment":"flow control","match":"(?xi)\n    (?<=(\\s|\\()) # preceded by space or (\n    ( or|and|else|prog(n|1|2|\\*)?|begin|if|(e|c)?case|when|unless|\n      cond|multiple-value-prog1|unwind-protect|block|return(-from)?|\n      tagbody|go|catch|throw|sleep)\n    (?=(\\s|\\()) # followed by space or (","name":"keyword.control.common.lisp"},{"comment":"predicates","match":"(?xi)\n    (?<=(\\s|\\()) # preceded by space or (\n    ((/|>|<)?=|>|<|minusp|zerop|plusp|evenp|oddp|numberp|realp|\n     rationalp|floatp|integerp|complexp|random-state-p|\n     ([[:alpha:]][[:alnum:]!$%&*+-./:<=>?@^_~]*-p) # all `-p`\n    )\n    (?=(\\s|\\()) # followed by space or (","name":"support.function.boolean-test.common.lisp"},{"comment":"\nThese functions either generate, or effect bindings.\nUnfortunately the `pset(f|q)` functions and `defparameter` don't\nseem to highlight... which is weird!\n","match":"(?xi)\n    (?<=(\\s|\\()) # preceded by space or (\n    ( (p)?set(f|q)?|def(constant|var|parameter)|multiple-value-setq|\n      shiftf|rotatef|makunbound|get(f)?|get-properties|remprop|remf|\n      progv|let(\\*)?|multiple-value-bind|destructuring-bind)\n    (?=(\\s|\\()) # followed by space or (","name":"storage.control.bindings.common.lisp"},{"comment":"numeric functions","match":"(?xi)\n  (?<=(\\s|\\())\n    # general numeric functions\n    ([*/+-]|1(\\+|-)|incf|decf|exp|expt|log|sqrt|isqrt|lcm|gcd|\n     sin|cos|tan|asin|acos|atan|sinh|cosh|tanh|asinh|acosh|\n     atanh|cis|conjugate|max|min|round|fround|floor|ffloor|\n     ceiling|fceiling|truncate|ftruncate|mod|rem\u001b|random|make|\n     float|signum|numerator|denominator|realpart|imagpart|\n     complex|phase|abs|rational|rationalize|float\n    )\n  (?=(\\s|\\())","name":"keyword.operator.numeric.common.lisp"},{"match":"(?xi)\n    (?<=(\\s|\\()) # preceded by space or (\n    ( append|apply|approximate|\n      construct-identifier|display|\n      funcall|force|cd|gen-counter|gen-loser|\n      generate-identifier|last-pair|length|\n      list|list-ref|list-tail|load|log|\n      macro|magnitude|map|map-streams|max|member|memq|\n      memv|min|newline|nil|not|peek-char|rationalize|\n      read|read-char|return|reverse|sequence|substring|\n      truncate|values-list|write|write-char|\n\n      # cons, car, cdr, etc\n      cons|c(a|d){1,4}r|\n\n      # ports / files\n      call-with-(?:input|output)-file|\n      (?:close|current)-(?:input|output)-port|\n      with-(?:input|output)-from-file|\n      open-(?:input|output)-file|\n\n      # char-«foo»\n      char-(?:downcase|upcase|ready)|\n\n      # make-«foo»\n      make-(?:polar|promise|rectangular|string|vector)\n\n      # string-«foo», vector-«foo»\n      string(?:-(?:append|copy|length|ref))?\n    )\n    (?=(\\s|\\()) # followed by space or (","name":"support.function.general.common.lisp"}]},"quote":{"patterns":[{"comment":"Quoted symbol 'foo","captures":{"1":{"name":"punctuation.section.quoted.symbol.common.lisp"}},"match":"(')\\s*([0-9a-zA-Z!$%&*+-./:<=>?@^_~]+)","name":"constant.symbol.common.lisp"},{"comment":"Empty list: '()","captures":{"1":{"name":"punctuation.section.quoted.empty-list.common.lisp"},"2":{"name":"meta.expression.common.lisp"},"3":{"name":"punctuation.section.expression.begin.common.lisp"},"4":{"name":"punctuation.section.expression.end.common.lisp"}},"match":"(')\\s*((\\()\\s*(\\)))","name":"constant.other.empty-list.common.lisp"},{"coment":"This is for quoted lists: '(foo bar baz)","begin":"('\\()","beginCaptures":{"1":{"name":"punctuation.section.quoted.common.lisp"}},"end":"(\\))(\\n)?","name":"constant.other.quoted-object.common.lisp","patterns":[{"include":"#quoted"}]}]},"quote-sexp":{"begin":"(?<=\\()\\s*(quote)\\b\\s*","beginCaptures":{"1":{"name":"keyword.control.quote.common.lisp"}},"contentName":"constant.other.quote.common.lisp","end":"(?=[)])","patterns":[{"include":"#quoted"}]},"quoted":{"patterns":[{"include":"#comment"},{"include":"#string"},{"include":"#constants"},{"begin":"(\\()","beginCaptures":{"1":{"name":"punctuation.section.expression.begin.common.lisp"}},"end":"(\\))","endCaptures":{"1":{"name":"punctuation.section.expression.end.common.lisp"}},"name":"meta.expression.quoted.common.lisp","patterns":[{"include":"#quoted"}]},{"include":"#quote"},{"include":"#illegal"}]},"sexp":{"begin":"(\\()","beginCaptures":{"1":{"name":"punctuation.section.expression.begin.common.lisp"}},"end":"(\\))(\\n)?","endCaptures":{"1":{"name":"punctuation.section.expression.end.common.lisp"},"2":{"name":"meta.after-expression.common.lisp"}},"name":"meta.expression.common.lisp","patterns":[{"include":"#comment"},{"include":"#quote-sexp"},{"include":"#quote"},{"include":"#comment"},{"include":"#language-functions"},{"include":"#string"},{"include":"#constants"},{"begin":"(?xi)\n(?<=\\()\n(lambda)\\s+\n  (\\(\\s*\n    ((\n      [^()]+[\\n\\s]*|\n      \\([^()\\s]+\\s+[^()\\s]+\\)[\\n\\s]*\n     )*)\n  \\))","captures":{"1":{"name":"keyword.control.common.lisp"},"3":{"name":"variable.parameter.common.lisp"}},"end":"(?=\\))","name":"meta.declaration.procedure.common.lisp","patterns":[{"include":"#comment"},{"include":"#constants"},{"include":"#string"},{"include":"#quote"},{"include":"#sexp"},{"include":"#illegal"}]},{"begin":"(?xi)\n(?<=\\()\n(defstruct)\\s+","captures":{"1":{"name":"storage.type.structure.common.lisp"}},"end":"(?=\\))","name":"meta.declaration.structure.common.lisp","patterns":[{"include":"#comment"},{"include":"#constants"},{"include":"#string"},{"include":"#quote"},{"include":"#sexp"},{"include":"#illegal"}]},{"begin":"(?xi)\n(?<=\\()\n(def[\\S]*)\\s+\n([\\S]*)\\s+\n  (\\(\\s*\n    ((\n      [^()]+[\\n\\s]*|\n      \\([^()\\s]+\\s+[^()\\s]+\\)[\\n\\s]*\n     )*)\n  \\))","captures":{"1":{"name":"keyword.control.common.lisp"},"2":{"name":"entity.name.function.common.lisp"},"4":{"name":"variable.parameter.common.lisp"}},"end":"(?=\\))","name":"meta.declaration.procedure.common.lisp","patterns":[{"include":"#comment"},{"include":"#constants"},{"include":"#string"},{"include":"#quote"},{"include":"#sexp"},{"include":"#illegal"}]},{"include":"#sexp"}]},"string":{"patterns":[{"match":"#\\\\(Space|Backspace|Tab|Rubout|Linefeed|Return|Page|Newline|.)(?=\\s)","name":"string.character.common.lisp"},{"begin":"(\")","end":"(\")","name":"string.quoted.double.common.lisp","patterns":[{"match":"\\\\.","name":"constant.character.escape.common.lisp"}]}]}}}